<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bjpowernode.dao.StudentDao">


    <!--    <select id="selStudents" resultType="com.bjpowernode.domian.Student">-->
    <!--        select * from student-->
    <!--    </select>-->
    <!--    <insert id="insertStudents">-->
    <!--        insert into student values(#{id},#{name},#{email},#{age})-->
    <!--    </insert>-->
    <!--    <delete id="deleteStudents">-->
    <!--        delete from student where id=#{id}-->
    <!--    </delete>-->
    <!--    <update id="updateStudents">-->
    <!--        update  student set name=#{name}  where id=#{id}-->
    <!--    </update>-->


    <!--parameterType:dao接口中的方法参数的数据类型
                parameterType他的值是java数据类型的权限定名称或者mybatis定义的别名
                例如:parameterType="java.lang.Integer"(权限定名称)
                    parameterType="int"(别名)
                 注意:parameter不是强制的,mybatis通过反射机制能够发现接口参数的数据类型,所以可以没有,一般我们不写
                 使用#{}之后,mybatis执行sql是使用的jdbc中的preparedStatement对象
                 由mybatis执行下面的代码:
                    1.mybatis创建Connection,preparedStatement对象
                        String sql="select * from student where id=#{id}";
                        PreparedStatement pst=conn.preparedStatement(sql);
                        pat.setInt(1,1001);

                    2.执行sql封装为resultType="com.bjpowernode.domian.Student"这个对象
                        ResultSet rs=ps.executeyQuery();
                        Student student=null;
                        while(rs.next()){
                            //从数据库取得一行数据,存在一个java对象属性中
                            student=new Student();
                            student.setId(rs.getInt("Id"));
                            student.setId(rs.getString("Name"));
                            student.setId(rs.getString("email"));
                            student.setId(rs.getInt("age"));
                            }
                        return student;//给了dao方法调用的返回值
                 -->
    <select id="selectStudentById" resultType="com.bjpowernode.domian.Student" parameterType="java.lang.Integer">
        select * from student where id=#{id}
    </select>

    <!--多个参数,使用@Param命名-->
    <select id="selectMulitParam" resultType="com.bjpowernode.domian.Student">
 select * from student where name=#{myname} or age=#{myage}
    </select>

    <!--多个参数,使用Java对象,作为参数的实际值
                使用对象的语句: #{属性名,javaTpe=类型名称,JDBCType=数据类型} 很少用
                javaType:指java中的属性数据类型
                jdbcType:在数据库中的数据类型
                    例如: #{paramname,javaType=java.lang.String,jdbcType=varchar}
                我们简化的方式: #{属性值},javaType,jdbcType的值mybatis反射 能获取,不用提供

                -->
    <!-- select * from student where name=#{paramName,javaType=java.lang.String,jdbcType=VARCHAR} or
                              age=#{paramAge,javaType=java.lang.Integer,jdbcType=INTEGER}-->
    <select id="selectMultiObject" resultType="com.bjpowernode.domian.Student"
            parameterType="com.bjpowernode.vo.QueryParam">

 select id,name, email,age from student where name=#{paramName}  or age=#{paramAge}
    </select>

    <select id="selectMultiStudent" resultType="com.bjpowernode.domian.Student">
        select id,name, email,age from student where name=#{name}  or age=#{age}
    </select>
    <!--多个参数使用位置-->
    <select id="selectMulitPosition" resultType="com.bjpowernode.domian.Student">
         select * from student where name=#{arg0}  or age=#{arg1}
    </select>
<!--多个参数,使用Map添加多个值
由于可读性比较差,所以不推荐-->
    <select id="selectMulitByMap" resultType="com.bjpowernode.domian.Student">
        select * from student where name=#{myname}  or age=#{age}
    </select>

    <!--使用 ${}-->
    <select id="selectUse$" resultType="com.bjpowernode.domian.Student">
         select * from student where name=${myname}
    </select>

    <!--
   $替换列名
-->
    <select id="selectUse$Order" resultType="com.bjpowernode.domian.Student">
         select * from student order by ${colName}
    </select>
</mapper>

 